#!/usr/bin/env node

/* eslint-disable no-console */

const fs = require("fs");
const pg = require("pg");
const fetch = require("node-fetch");
const prettier = require("prettier");
const { graphql } = require("graphql");
const child_process = require("child_process");
const {
  createPostGraphileSchema,
  withPostGraphileContext,
} = require("postgraphile");
const PgSimplifyInflectorPlugin = require("@graphile-contrib/pg-simplify-inflector");
const lowerCase = require("lodash/lowerCase");

function upperFirst(str) {
  return str[0].toUpperCase() + str.substr(1);
}
function filenameToTitle(str) {
  return upperFirst(lowerCase(str.replace(/^[0-9]+_/, "")));
}

async function prettify(filepath, content) {
  const options = await prettier.resolveConfig(filepath);
  return prettier.format(content, {
    ...options,
    printWidth: 38,
    filepath,
  });
}

async function spawn(command, args, options = {}, stdin = null) {
  return new Promise((resolve, reject) => {
    console.log(command, ...args);
    const cp = child_process.spawn(command, args, {
      stdio: "pipe",
      ...options,
    });
    let stdout = "";
    let stderr = "";
    cp.stdout.on("data", data => {
      stdout += data;
    });
    cp.stderr.on("data", data => {
      stderr += data;
    });
    cp.on("error", reject);
    function fail(e) {
      e.stdout = stdout;
      e.stderr = stderr;
      console.error(stderr);
      reject(e);
    }
    cp.on("close", code => {
      if (code === 0) {
        resolve({
          stdout,
          stderr,
          code,
        });
      } else {
        const e = new Error(`Failed with status code ${code}`);
        e.code = code;
        fail(e);
      }
    });
    if (stdin) {
      cp.stdin.on("error", fail);
      cp.stdin.write(stdin);
      cp.stdin.end();
    } else {
      cp.stdin.end();
    }
  });
}

async function psql(flags, sql) {
  return spawn(
    "psql",
    ["-X", "-1", "-v", "ON_ERROR_STOP=1", ...flags],
    {},
    sql
  );
}

async function main() {
  const schemaSql = await (await fetch(
    "https://raw.githubusercontent.com/graphile/examples/master/data/schema.sql"
  )).text();
  const dataSql = await (await fetch(
    "https://raw.githubusercontent.com/graphile/examples/master/db/999_data.sql"
  )).text();
  try {
    await spawn("dropdb", ["graphile_org_demo"]);
  } catch (e) {
    /* non-existence is fine */
  }
  await spawn("createdb", ["-O", "graphiledemo", "graphile_org_demo"]);
  await psql(["graphile_org_demo"], schemaSql);
  await psql(["graphile_org_demo"], dataSql);
  const pgPool = new pg.Pool({
    connectionString: "postgres://localhost/graphile_org_demo",
  });
  try {
    const postgraphileSchema = await createPostGraphileSchema(
      pgPool,
      ["app_public"],
      {
        dynamicJson: true,
        appendPlugins: [PgSimplifyInflectorPlugin],
      }
    );
    const queryPath = `${__dirname}/../examples/queries`;
    const directories = fs
      .readdirSync(queryPath)
      .filter(dir => fs.statSync(`${queryPath}/${dir}`).isDirectory())
      .sort();

    const examples = [];

    for (const dir of directories) {
      const titleFromFile = null;
      const example = {
        title: titleFromFile || filenameToTitle(dir),
        examples: [],
      };
      examples.push(example);
      const dirPath = `${queryPath}/${dir}`;
      const outPath = `${__dirname}/../src/examples/${dir}`;
      await spawn("mkdir", ["-p", outPath]);
      const queries = fs
        .readdirSync(dirPath)
        .filter(f => f.match(/^[^.].*\.graphql$/))
        .sort();
      for (const queryFilename of queries) {
        const queryFilePath = `${dirPath}/${queryFilename}`;
        const id = `${dir}__${queryFilename}`;
        const query = fs.readFileSync(queryFilePath, "utf8");
        const { data, errors } = await withPostGraphileContext(
          {
            pgPool,
            pgSettings: {
              role: "graphiledemo_visitor",
              "jwt.claims.user_id": 1,
            },
          },
          context => graphql(postgraphileSchema, query, null, context)
        );
        if (errors && errors.length) {
          throw new Error(
            `Errors occurred whilst processing ${queryFilePath}!\n` +
              String(errors)
          );
        }
        const prettyQuery = await prettify(queryFilePath, query);
        const prettyData = await prettify(
          queryFilePath + ".json",
          JSON.stringify(data)
        );
        example.examples.push({
          title: filenameToTitle(queryFilename.replace(/\.graphql$/, "")),
          query: prettyQuery,
          result: prettyData,
        });
      }
    }
    fs.writeFileSync(
      `${__dirname}/../src/data/examples.json`,
      JSON.stringify(examples, null, 2)
    );
  } finally {
    pgPool.end();
  }
}

main().then(null, error => {
  console.error(error);
  process.exit(1);
});
